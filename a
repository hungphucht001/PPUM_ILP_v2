
    # def utility_list_double(self, D):
    #     lables = self.select_labels_double(D)
    #     arr_all = []
    #     for item in lables:
    #         arra_ = []
    #         for row in D:
    #             if self.compare_array(row["item"], item):
    #                 arra_.append(row)
    #         arr = [item, arra_]
    #         arr_all.append(arr)
    #     return arr_all, lables

    # def list_item_set_double(self, item_dict):
    #     items_arr = []
    #     for i in range(0, len(item_dict)):
    #         for j in range(i + 1, len(item_dict)):
    #             lable, data = self.merge_data(item_dict[i], item_dict[j])
    #             if data:
    #                 items_arr = items_arr + data
    #     return items_arr

# list_item_set_double = self.list_item_set_double(utility_list)
        # utility_list_double, labels_double = self.utility_list_double(list_item_set_double)
def double_to_labels(items):
    new_lables = []
    for i in range(0, len(items) - 1):
        for j in range(i + 1, len(items)):
            new_lables.append(items[i] + items[j])
    return new_lables

    def select_labels_double(arr):
    """
        select labels from a list
    """
    items = []
    for row in arr:
        if not check_labels(items, row["item"]):
            items.append(row["item"])
    return items
def check_labels(arr, arr_item):
    for item in arr:
        if item == arr_item:
            return True
    return False
def merge_data(data_one, data_two):
    lable = [data_one[0][0], data_two[0][0]]
    data = []
    for row_one in data_one[1]:
        for row_two in data_two[1]:
            if row_one["tid"] == row_two["tid"]:
                data.append({
                    "tid": row_one["tid"],
                    "item": lable,
                    "Ru": row_two["Ru"],
                    "u": row_one["u"] + row_two["u"]})
    return lable, data
